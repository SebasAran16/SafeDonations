// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "base64-sol/base64.sol";

error ERC721Metadata__URI_QueryFor_NonExistentToken();

contract SafeVulnerability is ERC721URIStorage {
    uint256 private s_tokenCounter;
    string private s_notVulnerableUri;
    string private s_vulnerableUri;
    address public s_owner;

    mapping(address => bool) public isAdmin;
    mapping(uint256 => bool) private s_tokenIdIsVulnerable;
    mapping(uint256 => string) public s_tokenToUri;
    event CreatedNFT(uint256 indexed tokenId, int256 highValue);
    event NewAdminAdded(address indexed newAdmin);

    modifier onlyOwner() {
        require(msg.sender == s_owner);
        _;
    }

    modifier onlyAdmin() {
        require(isAdmin[msg.sender] == true);
        _;
    }

    constructor(
        string memory vulnerableSvg,
        string memory notVulnerableSvg
    ) ERC721("SafeVulnerability", "SV") {
        s_owner = msg.sender;
        s_tokenCounter = 0;
        setVulnerableSVG(vulnerableSvg);
        setNoVulnerableSVG(notVulnerableSvg);
        s_notVulnerableUri = svgToImageURI(notVulnerableSvg);
        s_vulnerableUri = svgToImageURI(vulnerableSvg);
    }

    function setVulnerableURI(string memory svgLowURI) public onlyOwner {
        s_notVulnerableUri = svgLowURI;
    }

    function setNoVulnerableURI(string memory svgHighURI) public onlyOwner {
        s_vulnerableUri = svgHighURI;
    }

    function setVulnerableSVG(string memory svgLowRaw) public onlyOwner {
        string memory svgURI = svgToImageURI(svgLowRaw);
        setVulnerableURI(svgURI);
    }

    function setNoVulnerableSVG(string memory svgHighRaw) public onlyOwner {
        string memory svgURI = svgToImageURI(svgHighRaw);
        setNoVulnerableURI(svgURI);
    }

    function mintNft(int256 highValue) public {
        s_tokenIdIsVulnerable[s_tokenCounter] = false;
        string memory tokenMetadata = getTokenURI(s_tokenCounter);
        _safeMint(msg.sender, s_tokenCounter);
        _setTokenURI(s_tokenCounter, tokenMetadata);
        s_tokenCounter = s_tokenCounter + 1;
        emit CreatedNFT(s_tokenCounter, highValue);
    }

    // You could also just upload the raw SVG and have solildity convert it!
    function svgToImageURI(
        string memory svg
    ) public pure returns (string memory) {
        string memory baseURL = "data:image/svg+xml;base64,";
        string memory svgBase64Encoded = Base64.encode(
            bytes(string(abi.encodePacked(svg)))
        );
        return string(abi.encodePacked(baseURL, svgBase64Encoded));
    }

    function _baseURI() internal pure override returns (string memory) {
        return "data:application/json;base64,";
    }

    function getTokenURI(uint256 tokenId) public view returns (string memory) {
        if (!_exists(tokenId)) {
            revert ERC721Metadata__URI_QueryFor_NonExistentToken();
        }

        string memory imageURI = s_notVulnerableUri;
        string memory vulnerabilityStatus = "Not Vulnerable";

        if (s_tokenIdIsVulnerable[tokenId] == true) {
            imageURI = s_vulnerableUri;
            vulnerabilityStatus = "Vulnerable";
        }
        return
            string(
                abi.encodePacked(
                    _baseURI(),
                    Base64.encode(
                        bytes(
                            abi.encodePacked(
                                '{"name":"',
                                name(),
                                '", "description":"This token represents the Vulnerability Status for the owner wallet", ',
                                '"attributes": [{"trait_type": "state", "value": "',
                                vulnerabilityStatus,
                                '"}], "image":"',
                                imageURI,
                                '"}'
                            )
                        )
                    )
                )
            );
    }

    function addAdmin(address newAdmin) public onlyOwner {
        isAdmin[newAdmin] = true;
        emit NewAdminAdded(newAdmin);
    }

    function getTokenStatus(uint256 tokenId) public view returns (bool) {
        return s_tokenIdIsVulnerable[tokenId];
    }

    function setTokenState(uint256 tokenId, bool state) public onlyAdmin {
        s_tokenIdIsVulnerable[tokenId] = state;
        string memory metadata = getTokenURI(tokenId);
        _setTokenURI(tokenId, metadata);
    }

    function getNotVulnerableSVG() public view returns (string memory) {
        return s_notVulnerableUri;
    }

    function getVulnerableSVG() public view returns (string memory) {
        return s_vulnerableUri;
    }

    function getTokenCounter() public view returns (uint256) {
        return s_tokenCounter;
    }
}
